pipeline {
    agent {
        label 'Jenkins_Slave' // Replace with the label of your Jenkins slave
    }

    environment {
        SONARQUBE_SCANNER_HOME = tool 'SonarQube' // Replace with the actual path to your SonarQube Scanner installation on the Jenkins slave
    }

    def registry = 'https://sumitsscet.jfrog.io'

    stages {
        stage('Checkout') {
            steps {
                // Checkout code from the GitHub repository
                git branch: 'main', url: 'https://github.com/sahusu06/tweet-trend-new.git'
            }
        }

        stage('Build') {
            steps {
                // Run Maven build (mvn install)
                withMaven(maven: 'MAVEN_HOME')
                {
                    sh 'mvn clean package'
                    
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                script {
                    withSonarQubeEnv('SONAR_TOKEN') {
                        sh "${env.SONARQUBE_SCANNER_HOME}/bin/sonar-scanner"
                    }
                }
            }
        }

        stage("Jar Publish") {
            steps {
                script {
                        echo '<--------------- Jar Publish Started --------------->'
                         def server = Artifactory.newServer url:registry+"/artifactory" ,  credentialsId:"jfrog"
                         def properties = "buildid=${env.BUILD_ID},commitid=${GIT_COMMIT}";
                         def uploadSpec = """{
                              "files": [
                                {
                                  "pattern": "jarstaging/(*)",
                                  "target": "maven-libs-release-local/{1}",
                                  "flat": "false",
                                  "props" : "${properties}",
                                  "exclusions": [ "*.sha1", "*.md5"]
                                }
                             ]
                         }"""
                         def buildInfo = server.upload(uploadSpec)
                         buildInfo.env.collect()
                         server.publishBuildInfo(buildInfo)
                         echo '<--------------- Jar Publish Ended --------------->'  
                
                }
            }   
        }   
    }

    post {
        success {
            echo 'Build successful! You can add more post-build actions here.'
        }
        failure {
            echo 'Build failed! You can add more post-build actions for failure handling.'
        }
    }
}
